CREATE DATABASE university; --Создаем базу данных для университета

--Cоздаем таблицу учителя
CREATE TABLE teacher (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    subject VARCHAR(50) NOT NULL
);

--Cоздаем таблицу группы 
CREATE TABLE group_s (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    teacher_id INTEGER REFERENCES teacher(id)
);

--Cоздаем таблицу студентов
CREATE TABLE student(
	id SERIAL PRIMARY KEY ,
	name VARCHAR(80) NOT NULL,
	age INT NOT NULL,
	gender VARCHAR(10) NOT NULL,
	group_id INTEGER REFERENCES group_s(id)
	);

--Заполянем таблицу учитель данными 
INSERT INTO teacher (name, subject)
VALUES ('Иванова Елена', 'Математика'),
	('Петров Виктор', 'Физика'),
	('Сидорова Анна', 'Иностранный язык'),
	('Смирнова Мария', 'Литература'),
	('Кузнецова Ольга', 'История'),
	('Белова Татьяна', 'Химия'),
	('Козлова Екатерина', 'Биология'),
	('Новикова Ангелина', 'Экономика'),
	('Лебедева Наталья', 'Право'),
	('Тимофеева Оксана', 'Психология');

--Заполянем таблицу груп данными 
INSERT INTO group_s (name, teacher_id)
VALUES('Группа 1', 1),
	('Группа 2', 2),
	('Группа 3', 3),
	('Группа 4', 4),
	('Группа 5', 5),
	('Группа 6', 6),
	('Группа 7', 7),
	('Группа 8', 8),
	('Группа 9', 9),
	('Группа 10', 10);

--Заполянем таблицу студент данными 
INSERT INTO student (name, age, gender, group_id)
VALUES ('Андрей Петров', 19, 'М', 1),
	('Мария Иванова', 20, 'Ж', 1),
	('Алексей Смирнов', 19, 'М', 2),
	('Екатерина Козлова', 20, 'Ж', 1),
	('Никита Иванов', 21, 'М', 2),
	('София Сидорова', 18, 'Ж', 7),
	('Дмитрий Козлов', 20, 'М', 2),
	('Анна Петрова', 21, 'Ж', 9),
	('Иван Николаев', 19, 'М', 2),
	('Елена Сидорова', 22, 'Ж', 8),
	('Артем Петров', 20, 'М', 4),
	('Валерия Иванова', 19, 'Ж', 6),
	('Петр Сидоров', 20, 'М', 8),
	('Ольга Петрова', 22, 'Ж', 6),
	('Сергей Иванов', 21, 'М', 7),
	('Анастасия Смирнова', 20, 'Ж', 3),
	('Кирилл Сидоров', 19, 'М', 7),
	('Татьяна Иванова', 20, 'Ж', 3),
	('Максим Петров', 20, 'М', 4),
	('Надежда Козлова', 19, 'Ж', 10),
	('Денис Смирнов', 21, 'М', 4),
	('Марина Сидорова', 20, 'Ж', 10),
	('Илья Иванов', 19, 'М', 4),
	('Елена Петрова', 22, 'Ж', 4),
	('Олег Сидоров', 20, 'М', 5),
	('Виктория Иванова', 21, 'Ж', 8),
	('Даниил Петров', 19, 'М', 5),
	('Юлия Козлова', 20, 'Ж', 10),
	('Андрей Смирнов', 21, 'М', 5),
	('Софья Иванова', 19, 'Ж', 5);


-- 2. Получить всех студентов в группе
SELECT *
FROM student s ;

-- 3. Получить все группы определенного учителя
SELECT gs.name AS group_name, t.name AS teacher_name
FROM group_s gs
JOIN teacher t ON gs.teacher_id = t.id


-- 4. Вывести всех студентов и имя их группы
SELECT s.name AS student_name , gs.name AS group_name
FROM student s 
LEFT JOIN group_s gs ON s.group_id = gs.id
ORDER BY student_name ASC ;

-- 5. Вывести все группы и имя учителя при условии что в группе может не быть учителя, тогда эту группу выводить не нужно.
-- Для этой задачи добалю группу без учителя 
INSERT INTO group_s (name)
VALUES('Группа 11');

SELECT group_s.name, teacher.name 
FROM group_s 
LEFT JOIN teacher ON group_s.teacher_id = teacher.id 
WHERE teacher.id IS NOT NULL;

-- 6. У студентов должно быть поле возраст и пол. Выведи средний возраст студентов в любой группе
SELECT round(AVG(age))
FROM student 


-- 7. Выведи все группы и средний возраст студентов в ней
SELECT round(avg(age)) AS Возраст, gs.name AS Группа 
FROM student s 
JOIN group_s gs ON s.group_id = gs.id
GROUP BY gs.name

-- 8. Выведи самого старшего парня и самую старшую девушку в группе
-- Этот такс гуглил , так как не знал как вывести М и Ж через один запрос. Filter тоже впервые вижу 
SELECT gs.name AS Группа, 
       MAX(s.age) FILTER (WHERE s.gender = 'М') AS Самый_старший_парень, 
       MAX(s.age) FILTER (WHERE s.gender = 'Ж') AS Самая_старшая_девушка
FROM student s
JOIN group_s gs ON s.group_id = gs.id
GROUP BY gs.name;


-- 9. Выведи всех студентов сгруппированых по возрасту и количество студентов(23 года - 20 студентов 24 года - 15 студентов)
SELECT age , count(*)
FROM student s 
GROUP BY age 

-- 10. Выведи Средний возраст девушек в группе и парней
SELECT gender, round(AVG(age))
FROM student 
GROUP BY gender;

-- Добавь для промежуточной таблицы предметов и студентов поле grade которое может быть пустым, 
-- или со значением оценки для данного предмета


--Cоздаем таблицу предмет
CREATE TABLE subject (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);

INSERT INTO subject(name)
VALUES ('Математика'),
	('Физика'),
	('Иностранный язык'),
	('Литература'),
	('История'),
	('Химия'),
	('Биология'),
	('Экономика'),
	('Право'),
	('Психология');


--Cоздаем промежуточную таблицу предметов и студентов 
CREATE TABLE student_subject (
    student_id INTEGER REFERENCES student(id),
    subject_id INTEGER REFERENCES subject(id),
    grade INTEGER
);
-- Заполянем 25 студентов оценками , по умолчанию 78
INSERT INTO student_subject
VALUES
	(1,1,78), (1,2,78), (1,3,78), (1,4,78), (1,5,78), (1,6,78), (1,7,78), (1,8,78), (1,9,78), (1,10,78),
	(2,1,78), (2,2,78), (2,3,78), (2,4,78), (2,5,78), (2,6,78), (2,7,78), (2,8,78), (2,9,78), (2,10,78),
	(3,1,78), (3,2,78), (3,3,78), (3,4,78), (3,5,78), (3,6,78), (3,7,78), (3,8,78), (3,9,78), (3,10,78),
	(4,1,78), (4,2,78), (4,3,78), (4,4,78), (4,5,78), (4,6,78), (4,7,78), (4,8,78), (4,9,78), (4,10,78),
	(5,1,78), (5,2,78), (5,3,78), (5,4,78), (5,5,78), (5,6,78), (5,7,78), (5,8,78), (5,9,78), (5,10,78),
	(6,1,78), (6,2,78), (6,3,78), (6,4,78), (6,5,78), (6,6,78), (6,7,78), (6,8,78), (6,9,78), (6,10,78),
	(7,1,78), (7,2,78), (7,3,78), (7,4,78), (7,5,78), (7,6,78), (7,7,78), (7,8,78), (7,9,78), (7,10,78),
	(8,1,78), (8,2,78), (8,3,78), (8,4,78), (8,5,78), (8,6,78), (8,7,78), (8,8,78), (8,9,78), (8,10,78),
	(9,1,78), (9,2,78), (9,3,78), (9,4,78), (9,5,78), (9,6,78), (9,7,78), (9,8,78), (9,9,78), (9,10,78),
	(10,1,78), (10,2,78), (10,3,78), (10,4,78), (10,5,78), (10,6,78), (10,7,78), (10,8,78), (10,9,78), (10,10,78),
	(11,1,78), (11,2,78), (11,3,78), (11,4,78), (11,5,78), (11,6,78), (11,7,78), (11,8,78), (11,9,78), (11,10,78),
	(12,1,78), (12,2,78), (12,3,78), (12,4,78), (12,5,78), (12,6,78), (12,7,78), (12,8,78), (12,9,78), (12,10,78),
	(13,1,78), (13,2,78), (13,3,78), (13,4,78), (13,5,78), (13,6,78), (13,7,78), (13,8,78), (13,9,78), (13,10,78),
	(14,1,78), (14,2,78), (14,3,78), (14,4,78), (14,5,78), (14,6,78), (14,7,78), (14,8,78), (14,9,78), (14,10,78),
	(15,1,78), (15,2,78), (15,3,78), (15,4,78), (15,5,78), (15,6,78), (15,7,78), (15,8,78), (15,9,78), (15,10,78),
	(16,1,78), (16,2,78), (16,3,78), (16,4,78), (16,5,78), (16,6,78), (16,7,78), (16,8,78), (16,9,78), (16,10,78),
	(17,1,78), (17,2,78), (17,3,78), (17,4,78), (17,5,78), (17,6,78), (17,7,78), (17,8,78), (17,9,78), (17,10,78),
	(18,1,78), (18,2,78), (18,3,78), (18,4,78), (18,5,78), (18,6,78), (18,7,78), (18,8,78), (18,9,78), (18,10,78),
	(19,1,78), (19,2,78), (19,3,78), (19,4,78), (19,5,78), (19,6,78), (19,7,78), (19,8,78), (19,9,78), (19,10,78),
	(20,1,78), (20,2,78), (20,3,78), (20,4,78), (20,5,78), (20,6,78), (20,7,78), (20,8,78), (20,9,78), (20,10,78),
	(21,1,78), (21,2,78), (21,3,78), (21,4,78), (21,5,78), (21,6,78), (21,7,78), (21,8,78), (21,9,78), (21,10,78),
	(22,1,78), (22,2,78), (22,3,78), (22,4,78), (22,5,78), (22,6,78), (22,7,78), (22,8,78), (22,9,78), (22,10,78),
	(23,1,78), (23,2,78), (23,3,78), (23,4,78), (23,5,78), (23,6,78), (23,7,78), (23,8,78), (23,9,78), (23,10,78),
	(24,1,78), (24,2,78), (24,3,78), (24,4,78), (24,5,78), (24,6,78), (24,7,78), (24,8,78), (24,9,78), (24,10,78),
	(26,1,78), (26,2,78), (26,3,78), (26,4,78), (26,5,78), (26,6,78), (26,7,78), (26,8,78), (26,9,78), (26,10,78);

-- Ставим рандомные оценки студентам 
UPDATE student_subject
SET grade = FLOOR(RANDOM()*(99-65+1)+65)
WHERE grade = 78;

-- 1. Напиши запрос который будет выводить имя студента название предмета и оценку по данному предмету если она присутствует, если нет, то не выводить
SELECT s.name AS Студент, s2.name AS Предмет, ss.grade AS Оценка
FROM student s
LEFT JOIN student_subject ss ON s.id = ss.student_id
LEFT JOIN subject s2 ON ss.subject_id = s2.id
WHERE ss.grade IS NOT NULL;


-- 2. Написать запрос, который вернет всех студентов кто еще не зачислен ни на один курс (Запрос для промежуточной таблицы)
SELECT s.* 
FROM student s
LEFT JOIN student_subject ss ON s.id = ss.student_id
WHERE ss.grade  IS NULL;

-- 3. Добавь поле для студента средний бал. И выведи всех студентов у которых средний бал выше чем средний бал всех студентов
SELECT s.name AS Студент, AVG(ss.grade) AS Средний_бал
FROM student s 
LEFT JOIN student_subject ss ON s.id = ss.student_id 
GROUP BY s.name
HAVING AVG(ss.grade) > (SELECT AVG(grade) FROM student_subject)


-- 4. Выведи все курсы которые ведут преподователь женщина и количество студентов на него зачисленых
-- 4.1 Добавляем поле gender в учителя 
ALTER TABLE teacher ADD COLUMN gender VARCHAR(10);
UPDATE teacher SET gender = 'Ж' WHERE name IN ('Иванова Елена', 'Сидорова Анна', 'Смирнова Мария', 'Кузнецова Ольга', 'Белова Татьяна', 'Козлова Екатерина', 'Новикова Ангелина', 'Лебедева Наталья', 'Тимофеева Оксана');
UPDATE teacher SET gender = 'М' WHERE name = 'Петров Виктор';

SELECT t.name ,s.name AS Курс, COUNT(ss.student_id) AS Количество_Студентов
FROM teacher t
INNER JOIN subject s ON t.id = s.id
INNER JOIN student_subject ss ON s.id = ss.subject_id 
WHERE t.gender = 'Ж'
GROUP BY s.id, t.name


-- 5. Выведи имя студента и курса для каждого студента у кого по курсу высший бал стоит
SELECT s.name, s2.name, max(ss.grade)
FROM student s 
JOIN student_subject ss ON s.id = ss.student_id 
JOIN subject s2 ON ss.subject_id = s2.id 
WHERE (s2.id, ss.grade) IN (
  SELECT subject_id, MAX(grade)
  FROM student_subject
  GROUP BY subject_id)
 GROUP BY  s.name, s2.name
















